from tkinter import *
from tkinter import messagebox
import os

# Function to update the history text widget
def update_history():
    history_text.delete(1.0, END)
    with open("database_proj", 'r') as history_file:
        history_text.insert(INSERT, history_file.read())

def additem():
    e1 = entry1.get()
    e2 = entry2.get()
    e3 = entry3.get()
    e4 = entry4.get()
    e5 = entry5.get()

    with open("database_proj", 'a+') as f:
        f.write('{0} {1} {2} {3} {4}\n'.format(str(e1), e2, e3, str(e4), e5))

    entry1.delete(0, END)
    entry2.delete(0, END)
    entry3.delete(0, END)
    entry4.delete(0, END)
    entry5.delete(0, END)

    update_history()

def deleteitem():
    e1 = entry1.get()
    temp_file = "temp_database_proj"

    with open("database_proj", 'r') as f, open(temp_file, 'w') as temp:
        for line in f:
            if not e1 in line:
                temp.write(line)

    os.remove("database_proj")
    os.rename(temp_file, "database_proj")

    entry1.delete(0, END)
    entry2.delete(0, END)
    entry3.delete(0, END)
    entry4.delete(0, END)
    entry5.delete(0, END)

    update_history()

def updateitem():
    e1 = entry1.get()
    e2 = entry2.get()
    e3 = entry3.get()
    e4 = entry4.get()
    e5 = entry5.get()

    updated_line = '{0} {1} {2} {3} {4}\n'.format(str(e1), e2, e3, str(e4), e5)

    temp_file = "temp_database_proj"
    with open("database_proj", 'r') as f, open(temp_file, 'w') as temp:
        for line in f:
            if not e1 in line:
                temp.write(line)
            else:
                temp.write(updated_line)

    os.remove("database_proj")
    os.rename(temp_file, "database_proj")

    entry1.delete(0, END)
    entry2.delete(0, END)
    entry3.delete(0, END)
    entry4.delete(0, END)
    entry5.delete(0, END)

    update_history()

def firstitem():
    with open("database_proj", 'r') as f:
        first_line = f.readline().split()
        update_entries(first_line)

def lastitem():
    with open("database_proj", 'r') as f:
        for last_line in f:
            pass
        last_line = last_line.split()
        update_entries(last_line)

def searchitem():
    e11 = entry_search.get().strip()
    if not e11:
        messagebox.showinfo("Title", "Please enter a search query.")
        return

    with open("database_proj", 'r') as f:
        for line in f:
            if e11 in line:
                v = line.split()
                update_entries(v)
                break
        else:
            messagebox.showinfo("Title", "Item not found")

def previousitem():
    current_item = [entry1.get(), entry2.get(), entry3.get(), entry4.get(), entry5.get()]
    with open("database_proj", 'r') as f:
        for line in f:
            v = line.split()
            if v == current_item:
                break
            previous_item = v
    try:
        update_entries(previous_item)
    except UnboundLocalError:
        messagebox.showinfo("Title", "This is the first item.")

def nextitem():
    current_item = [entry1.get(), entry2.get(), entry3.get(), entry4.get(), entry5.get()]
    with open("database_proj", 'r') as f:
        next(f)  # Skip the first line
        for line in f:
            v = line.split()
            if v == current_item:
                next_line = f.readline().split()
                update_entries(next_line)
                break

def update_entries(values):
    entry1.delete(0, END)
    entry2.delete(0, END)
    entry3.delete(0, END)
    entry4.delete(0, END)
    entry5.delete(0, END)

    entry1.insert(0, str(values[0]))
    entry2.insert(0, str(values[1]))
    entry3.insert(0, str(values[2]))
    entry4.insert(0, str(values[3]))
    entry5.insert(0, str(values[4]))

def total_stock_price():
    total_price = 0
    with open("database_proj", 'r') as f:
        for line in f:
            item_details = line.split()
            price = float(item_details[1])
            quantity = int(item_details[2])
            total_price += price * quantity
    messagebox.showinfo("Total Stock Price", f"The total stock price is: {total_price}")

def exchange_items():
    item1 = [entry1.get(), entry2.get(), entry3.get(), entry4.get(), entry5.get()]
    item2 = [entry6.get(), entry7.get(), entry8.get(), entry9.get(), entry10.get()]
    with open("database_proj", 'r') as f, open("temp_database_proj", 'w') as temp:
        for line in f:
            if " ".join(item1) in line:
                temp.write(" ".join(item2) + "\n")
            elif " ".join(item2) in line:
                temp.write(" ".join(item1) + "\n")
            else:
                temp.write(line)
    os.remove("database_proj")
    os.rename("temp_database_proj", "database_proj")
    entry6.delete(0, END)
    entry7.delete(0, END)
    entry8.delete(0, END)
    entry9.delete(0, END)
    entry10.delete(0, END)

    update_history()

root = Tk()
root.title("Simple Pharmacy Management System")
root.configure(width=1000, height=600, bg='BLACK')

label0 = Label(root, text="MEDICAL MANAGEMENT SYSTEM", bg="black", fg="white", font=("Times", 30))
label0.grid(row=0, column=4, columnspan=2, padx=10, pady=10)

label1 = Label(root, text="ENTER ITEM NAME", bg="red", relief="ridge", fg="white", font=("Times", 12), width=25)
label1.grid(row=1, column=0, sticky=W, padx=10, pady=10)
entry1 = Entry(root, font=("Times", 12))
entry1.grid(row=1, column=1, padx=10, pady=10)

label2 = Label(root, text="ENTER ITEM PRICE", bd="2", relief="ridge", height="1", bg="red", fg="white", font=("Times", 12), width=25)
label2.grid(row=2, column=0, sticky=W, padx=10, pady=10)
entry2 = Entry(root, font=("Times", 12))
entry2.grid(row=2, column=1, padx=10, pady=10)

label3 = Label(root, text="ENTER ITEM QUANTITY", bd="2", relief="ridge", bg="red", fg="white", font=("Times", 12), width=25)
label3.grid(row=3, column=0, sticky=W, padx=10, pady=10)
entry3 = Entry(root, font=("Times", 12))
entry3.grid(row=3, column=1, padx=10, pady=10)

label4 = Label(root, text="ENTER ITEM CATEGORY", bd="2", relief="ridge", bg="red", fg="white", font=("Times", 12), width=25)
label4.grid(row=4, column=0, sticky=W, padx=10, pady=10)
entry4 = Entry(root, font=("Times", 12))
entry4.grid(row=4, column=1, padx=10, pady=10)

label5 = Label(root, text="ENTER ITEM DISCOUNT", bg="red", relief="ridge", fg="white", font=("Times", 12), width=25)
label5.grid(row=5, column=0, sticky=W, padx=10, pady=10)
entry5 = Entry(root, font=("Times", 12))
entry5.grid(row=5, column=1, padx=10, pady=10)

label6 = Label(root, text="ENTER SECOND ITEM NAME", bg="red", relief="ridge", fg="white", font=("Times", 12), width=25)
label6.grid(row=6, column=0, sticky=W, padx=10, pady=10)
entry6 = Entry(root, font=("Times", 12))
entry6.grid(row=6, column=1, padx=10, pady=10)

label7 = Label(root, text="ENTER SECOND ITEM PRICE", bd="2", relief="ridge", height="1", bg="red", fg="white", font=("Times", 12), width=25)
label7.grid(row=7, column=0, sticky=W, padx=10, pady=10)
entry7 = Entry(root, font=("Times", 12))
entry7.grid(row=7, column=1, padx=10, pady=10)

label8 = Label(root, text="ENTER SECOND ITEM QUANTITY", bd="2", relief="ridge", bg="red", fg="white", font=("Times", 12), width=25)
label8.grid(row=8, column=0, sticky=W, padx=10, pady=10)
entry8 = Entry(root, font=("Times", 12))
entry8.grid(row=8, column=1, padx=10, pady=10)

label9 = Label(root, text="ENTER SECOND ITEM CATEGORY", bd="2", relief="ridge", bg="red", fg="white", font=("Times", 12), width=25)
label9.grid(row=9, column=0, sticky=W, padx=10, pady=10)
entry9 = Entry(root, font=("Times", 12))
entry9.grid(row=9, column=1, padx=10, pady=10)

label10 = Label(root, text="ENTER SECOND ITEM DISCOUNT", bg="red", relief="ridge", fg="white", font=("Times", 12), width=25)
label10.grid(row=10, column=0, sticky=W, padx=10, pady=10)
entry10 = Entry(root, font=("Times", 12))
entry10.grid(row=10, column=1, padx=10, pady=10)

label_search = Label(root, text="SEARCH ITEM", bg="red", relief="ridge", fg="white", font=("Times", 12), width=25)
label_search.grid(row=11, column=0, sticky=W, padx=10, pady=10)
entry_search = Entry(root, font=("Times", 12))
entry_search.grid(row=11, column=1, padx=10, pady=10)
button_search = Button(root, text="SEARCH", bg="white", fg="black", width=20, font=("Times", 12), command=searchitem)
button_search.grid(row=11, column=2, padx=10, pady=10)

button1 = Button(root, text="ADD ITEM", bg="white", fg="black", width=20, font=("Times", 12), command=additem)
button1.grid(row=1, column=4, padx=10, pady=10)

button2 = Button(root, text="DELETE ITEM", bg="white", fg="black", width=20, font=("Times", 12), command=deleteitem)
button2.grid(row=1, column=5, padx=10, pady=10)

button3 = Button(root, text="UPDATE ITEM", bg="white", fg="black", width=20, font=("Times", 12), command=updateitem)
button3.grid(row=2, column=4, padx=10, pady=10)

button4 = Button(root, text="FIRST ITEM", bg="white", fg="black", width=20, font=("Times", 12), command=firstitem)
button4.grid(row=2, column=5, padx=10, pady=10)

button5 = Button(root, text="LAST ITEM", bg="white", fg="black", width=20, font=("Times", 12), command=lastitem)
button5.grid(row=3, column=4, padx=10, pady=10)

button6 = Button(root, text="PREVIOUS ITEM", bg="white", fg="black", width=20, font=("Times", 12), command=previousitem)
button6.grid(row=3, column=5, padx=10, pady=10)

button7 = Button(root, text="SHOW HISTORY", bg="white", fg="black", width=20, font=("Times", 12), command=update_history)
button7.grid(row=4, column=4, padx=10, pady=10)

button8 = Button(root, text="TOTAL STOCK PRICE", bg="white", fg="black", width=20, font=("Times", 12), command=total_stock_price)
button8.grid(row=4, column=5, padx=10, pady=10)

button9 = Button(root, text="EXCHANGE ITEMS", bg="white", fg="black", width=20, font=("Times", 12), command=exchange_items)
button9.grid(row=5, column=4, padx=10, pady=10)

button10 = Button(root, text="NEXT ITEM", bg="white", fg="black", width=20, font=("Times", 12), command=nextitem)
button10.grid(row=5, column=5, padx=10, pady=10)

history_text = Text(root, width=50, height=20, wrap=WORD)
history_text.grid(row=12, column=0, columnspan=6, padx=10, pady=10)
update_history()

root.mainloop()
